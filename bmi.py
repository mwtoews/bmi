class Bmi(object):
    def initialize(self, config_file: str) -> None: ...
    def update(self, time_interval: float) -> None: ...
    def finalize(self) -> None: ...
                
    def get_component_name(self) -> str: ...
    def get_input_var_names(self) -> Tuple[str]: ...
    def get_output_var_names(self) -> Tuple[str]: ...

    def get_var_grid(self, name: str) -> int: ...
    def get_var_type(self, name: str) -> str: ...
    def get_var_units(self, name: str) -> str: ...
    def get_var_itemsize(self, name: str) -> int: ...
    def get_var_nbytes(self, name: str) -> int: ...
    def get_var_location(self, name: str) -> str: ...
    def get_var_grid(self, name: str) -> int: ...

    def get_current_time(self) -> float: ...
    def get_start_time(self) -> float: ...
    def get_end_time(self) -> float: ...
    def get_time_units(self) -> str: ...
    def get_time_step(self) -> float: ...

    def get_value(self, name: str, dest: np.ndarray) -> None: ...
    def get_value_ptr(self, name: str) -> np.ndarray: ...
    def get_value_at_indices(self, name: str, dest: np.ndarray, inds: np.ndarray[int]) -> None: ...

    def set_value(self, name: str, values: np.ndarray) -> None: ...
    def set_value_at_indices(self, name: str, inds: np.ndarray[int], src: np.ndarray) -> None: ...

    # // Grid information
    def get_grid_rank(self, grid: int) -> int: ...
    def get_grid_size(self, grid: int) -> int: ...
    def get_grid_type(self, grid: int) -> str: ...

    # // Uniform rectilinear
    def get_grid_shape(self, grid: int, shape: np.ndarray[int]) -> None: ...
    def get_grid_spacing(self, grid: int, spacing: np.ndarray[float]) -> None: ...
    def get_grid_origin(self, grid: int, origin: np.ndarray[float]) -> None: ...

    # // Non-uniform rectilinear, curvilinear
    def get_grid_x(self, grid: int, x: np.ndarray[float]) -> None: ...
    def get_grid_y(self, grid: int, y: np.ndarray[float]) -> None: ...
    def get_grid_z(self, grid: int, z: np.ndarray[float]) -> None: ...

    def get_grid_node_count(self, grid: int) -> int: ...
    def get_grid_edge_count(self, grid: int) -> int: ...
    def get_grid_face_count(self, grid: int) -> int: ...

    def get_grid_edge_nodes(self, grid: int, edge_nodes: np.ndarray[int]) -> None: ...
    def get_grid_face_edges(self, grid: int, face_edges: np.ndarray[int]) -> None: ...
    def get_grid_face_nodes(self, grid: int, face_nodes: np.ndarray[int]) -> None: ...
    def get_grid_nodes_per_face(self, grid: int, nodes_per_face: np.ndarray[int]) -> None: ...
